generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String         @id @default(uuid()) @db.Uuid
  email         String         @unique
  password      String
  firstName     String         @map("first_name")
  lastName      String         @map("last_name")
  phoneNumber   String?        @map("phone_number")
  isVerified    Boolean        @default(false) @map("is_verified")
  role          UserRole       @default(CUSTOMER)
  avatarUrl     String?        @map("avatar_url")
  createdAt     DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime       @updatedAt @map("updated_at") @db.Timestamptz(6)
  bookings      Booking[]
  notifications Notification[]
  payments      Payment[]
  reviews       Review[]

  @@map("users")
}

model Route {
  id                String   @id @default(uuid()) @db.Uuid
  originCity        String   @map("origin_city")
  destinationCity   String   @map("destination_city")
  distance          Decimal  @db.Decimal(8, 2)
  estimatedDuration Int      @map("estimated_duration")
  basePrice         Decimal  @map("base_price") @db.Decimal(10, 2)
  isActive          Boolean  @default(true) @map("is_active")
  createdAt         DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)
  trips             Trip[]

  @@unique([originCity, destinationCity])
  @@map("routes")
}

model Bus {
  id             String    @id @default(uuid()) @db.Uuid
  plateNumber    String    @unique @map("plate_number")
  model          String
  capacity       Int
  amenities      String[]
  isActive       Boolean   @default(true) @map("is_active")
  maintenanceDue DateTime? @map("maintenance_due") @db.Date
  createdAt      DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)
  trips          Trip[]

  @@map("buses")
}

model Trip {
  id             String     @id @default(uuid()) @db.Uuid
  routeId        String     @map("route_id") @db.Uuid
  busId          String     @map("bus_id") @db.Uuid
  departureTime  DateTime   @map("departure_time") @db.Timestamptz(6)
  arrivalTime    DateTime   @map("arrival_time") @db.Timestamptz(6)
  price          Decimal    @db.Decimal(10, 2)
  availableSeats Int        @map("available_seats")
  status         TripStatus @default(SCHEDULED)
  driverNotes    String?    @map("driver_notes")
  createdAt      DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime   @updatedAt @map("updated_at") @db.Timestamptz(6)
  bookings       Booking[]
  reviews        Review[]
  bus            Bus        @relation(fields: [busId], references: [id], onDelete: Cascade)
  route          Route      @relation(fields: [routeId], references: [id], onDelete: Cascade)

  @@map("trips")
}

model Booking {
  id               String        @id @default(uuid()) @db.Uuid
  userId           String        @map("user_id") @db.Uuid
  tripId           String        @map("trip_id") @db.Uuid
  seatNumbers      Int[]         @map("seat_numbers")
  totalAmount      Decimal       @map("total_amount") @db.Decimal(10, 2)
  status           BookingStatus @default(PENDING)
  bookingCode      String        @unique @map("booking_code")
  passengerDetails Json?         @map("passenger_details")
  specialRequests  String?       @map("special_requests")
  createdAt        DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime      @updatedAt @map("updated_at") @db.Timestamptz(6)
  trip             Trip          @relation(fields: [tripId], references: [id], onDelete: Cascade)
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments         Payment[]

  @@map("bookings")
}

model Payment {
  id              String        @id @default(uuid()) @db.Uuid
  bookingId       String        @map("booking_id") @db.Uuid
  userId          String        @map("user_id") @db.Uuid
  amount          Decimal       @db.Decimal(10, 2)
  currency        String        @default("USD")
  stripePaymentId String?       @map("stripe_payment_id")
  stripeIntentId  String?       @map("stripe_intent_id")
  status          PaymentStatus @default(PENDING)
  paymentMethod   String?       @map("payment_method")
  processedAt     DateTime?     @map("processed_at") @db.Timestamptz(6)
  failureReason   String?       @map("failure_reason")
  createdAt       DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime      @updatedAt @map("updated_at") @db.Timestamptz(6)
  booking         Booking       @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Review {
  id          String   @id @default(uuid()) @db.Uuid
  userId      String   @map("user_id") @db.Uuid
  tripId      String   @map("trip_id") @db.Uuid
  rating      Int      @db.SmallInt
  comment     String?
  isAnonymous Boolean  @default(false) @map("is_anonymous")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)
  trip        Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Notification {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  title     String
  message   String
  type      String   @default("INFO")
  isRead    Boolean  @default(false) @map("is_read")
  data      Json?
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Promocode {
  id            String   @id @default(uuid()) @db.Uuid
  code          String   @unique
  description   String?
  discountType  String   @map("discount_type")
  discountValue Decimal  @map("discount_value") @db.Decimal(10, 2)
  minAmount     Decimal? @map("min_amount") @db.Decimal(10, 2)
  maxDiscount   Decimal? @map("max_discount") @db.Decimal(10, 2)
  usageLimit    Int?     @map("usage_limit")
  usedCount     Int      @default(0) @map("used_count")
  validFrom     DateTime @map("valid_from") @db.Timestamptz(6)
  validUntil    DateTime @map("valid_until") @db.Timestamptz(6)
  isActive      Boolean  @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  @@map("promocodes")
}

enum UserRole {
  CUSTOMER
  ADMIN
  DRIVER
}

enum TripStatus {
  SCHEDULED
  IN_TRANSIT
  COMPLETED
  CANCELLED
  DELAYED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}
